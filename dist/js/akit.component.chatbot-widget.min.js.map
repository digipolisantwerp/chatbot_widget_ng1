{"version":3,"sources":["module.js","main.js","controllers/chatbot-message.js","controllers/chatbot-widget.js","directives/chatbot-message.js","directives/chatbot-widget.js","directives/focus-from.js","directives/scroll-to-bottom.js","services/chatbot.js"],"names":["ng","window","angular","module","controller","$scope","this","data","hide","sendReply","message","$emit","$timeout","chatbotService","pinned","pinnedtext","placeholder","delay","title","avatar","session","initialmessage","focusTextInput","vm","session_id","type","send","isLoading","isOpen","loadingIndex","sendMessage","messageText","hidden","addToChat","url","then","result","Error","forEach","item","index","res","length","catch","error","pushError","toggleChatbot","event","onInputKey","which","$on","newData","concat","Object","assign","errorMessage","status","statusText","directive","$window","restrict","replace","templateUrl","controllerAs","scope","height","width","link","element","attrs","ctrl","$parse","$watch","focusFrom","value","focus","$parent","scrollToBottom","attr","$watchCollection","newVal","scrollTop","scrollHeight","service","$http","API","post","response","quickReplies","push","elements","map","text","replyText","action","run","$templateCache","put"],"mappings":"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","file":"akit.component.chatbot-widget.min.js","sourcesContent":["(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget', []);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget', []);\n\n})(window.angular);\n","(function (ng) {\n    \"use strict\";\n\n    ng.module(\"akit.component.chatbotWidget\").controller(\n        \"akit.component.chatbotWidget.chatbotMessageController\",\n        [\n            \"$scope\",\n            \"$timeout\",\n            function ($scope) {\n                this.data = $scope.data || { hide: true };\n\n                this.sendReply = function (message) {\n                    $scope.$emit('chatbotMessageReplyClicked', { message: message });\n                    $scope.data.hide = true;\n                };\n            }\n        ]\n    );\n})(window.angular);\n","(function (ng) {\n    \"use strict\";\n\n    ng.module(\"akit.component.chatbotWidget\").controller(\n        \"akit.component.chatbotWidget.chatbotWidgetController\",\n        [\n            \"$scope\",\n            \"$timeout\",\n            \"akit.component.chatbotWidget.chatbotService\",\n            function ($scope, $timeout, chatbotService) {\n                // ensure we have default values\n                this.pinned = ($scope.pinned === \"false\") ? false : !!$scope.pinned;\n                this.pinnedtext = $scope.pinnedtext || \"Een vraag stellen\";\n                this.placeholder = $scope.placeholder || \"\";\n                this.delay = $scope.delay || 400;\n                this.title = $scope.title || \"\";\n                this.avatar = $scope.avatar || \"https://cdn.antwerpen.be/core_branding_favicons/chatbot/a-chat.svg\";\n                this.session = $scope.session;\n                this.initialmessage = $scope.initialmessage || \"STARTCOMMANDO\";\n                // $scope.height is used directly (two-way binding)\n                // $scope.width is used directly (two-way binding)\n\n                // set to true to focus the text entry field\n                $scope.focusTextInput = false;\n\n                var vm = this;\n                vm.data = [];\n                vm.message = {\n                    session_id: this.session,\n                    message: \"\",\n                    type: \"text\",\n                    send: true\n                };\n                vm.isLoading = false;\n                vm.isOpen = false;\n                vm.loadingIndex = false;\n\n                vm.sendMessage = function (messageText, hidden) {\n                    if (messageText) vm.message.message = messageText;\n                    // user did not type a message && we aren't sending this programmatically\n                    if (!vm.message.message && !hidden) {\n                        return;\n                    }\n\n                    // Start loader\n                    vm.isLoading = true;\n\n                    // Add to data\n                    if (!hidden) vm.addToChat(vm.message);\n\n                    // Send new data\n                    chatbotService\n                        .sendMessage($scope.url, vm.message)\n                        .then(\n                            function (result) {\n                                if (result.data) {\n                                    result.data.forEach(function (item, index, res) {\n                                        vm.loadingIndex = index;\n                                        vm.isLoading = true;\n                                        $timeout(function () {\n                                            if (index === 0) {\n                                                item.avatar = vm.avatar;\n                                            }\n                                            vm.addToChat(item);\n                                            if (index === res.length - 1) {\n                                                vm.loadingIndex = null;\n                                                vm.isLoading = false;\n                                            }\n                                        }, index * vm.delay);\n                                    });\n                                } else {\n                                    throw new Error(\"no data returned from service\");\n                                }\n                            }\n                        ).catch(\n                            function (error) {\n                                vm.pushError(error);\n                                vm.isLoading = false;\n                            }\n                        );\n\n                    // Clean\n                    this.message.message = \"\";\n\n                    // Focus\n                    $scope.focusTextInput = true;\n                };\n\n                vm.toggleChatbot = function () {\n                    this.isOpen = !this.isOpen;\n                    if (this.isOpen) {\n                        $timeout(function () {\n                            $scope.focusTextInput = true;\n                        });\n                    }\n                };\n\n                vm.sendReply = function (event, data) {\n                    vm.sendMessage(data.message);\n                };\n\n                vm.onInputKey = function (event) {\n                    if (event.which === 13) {\n                        vm.sendMessage();\n                    }\n                };\n\n                // listen to click events of child <aui-chatbot-message> directives\n                $scope.$on('chatbotMessageReplyClicked', vm.sendReply);\n\n                vm.addToChat = function (message) {\n                    if (message.type === \"text\" && message.message === \"\") {\n                        // ignore blank messages\n                        // welcome message must not be shown if it is the empty string\n                    } else {\n                        var newData = [].concat(vm.data, [\n                            Object.assign({}, message)\n                        ]);\n                        this.data = newData;\n                    }\n                };\n\n                vm.pushError = function (error) {\n                    var errorMessage = {\n                        message:\n                            \"Error \" +\n                            error.status +\n                            \" - \" +\n                            error.statusText +\n                            \": \" +\n                            error.error.title,\n                        type: \"error\"\n                    };\n                    this.addToChat(errorMessage);\n                };\n\n                // request opening message from chatbot\n                vm.sendMessage(this.initialmessage, true);\n            }\n        ]\n    );\n// @ts-ignore\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget')\n        .directive('auiChatbotMessage', [\n            '$timeout',\n            '$window',\n            function (\n                $timeout,\n                $window\n            ) {\n\n                return {\n                    restrict: 'E',\n                    replace: true,\n                    templateUrl: '/assets/chatbot-widget/views/directives/chatbot-message.htm',\n                    controller: 'akit.component.chatbotWidget.chatbotMessageController',\n                    controllerAs: 'msg',\n                    scope: {\n                        data: '='\n                    }\n                };\n\n            }\n        ]);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget')\n        .directive('auiChatbotWidget', [\n            function () {\n\n                return {\n                    restrict: 'AE',\n                    replace: true,\n                    templateUrl: '/assets/chatbot-widget/views/directives/chatbot-widget.htm',\n                    controller: 'akit.component.chatbotWidget.chatbotWidgetController',\n                    controllerAs: 'chatbot',\n                    scope: {\n                        url: '@',\n                        session: '@',\n                        title: '@',\n                        pinned: '@?',\n                        pinnedtext: '@?',\n                        placeholder: '@?',\n                        delay: '@?',\n                        height: '=?',\n                        width: '=?',\n                        initialmessage: '@?',\n                        avatar: '@?'\n                    },\n                    link: function (scope, element, attrs, ctrl) {\n\n                    }\n                };\n\n            }\n        ]);\n\n// @ts-ignore\n})(window.angular);\n","(function (ng) {\r\n    'use strict';\r\n\r\n    // based on https://stackoverflow.com/a/14837021/20980\r\n    // <input focusFrom=\"focusMyInput\"> will be focused\r\n    // when this.focusMyInput is set to true in the controller\r\n    // and will then set this.focusMyInput to false\r\n\r\n    ng\r\n        .module('akit.component.chatbotWidget')\r\n        .directive('focusFrom', ['$timeout', '$parse', function ($timeout, $parse) {\r\n            return {\r\n                restrict: 'A',\r\n                link: function (scope, element, attrs) {\r\n                    scope.$watch(attrs.focusFrom, function (value) {\r\n                        if (value) {\r\n                            $timeout(function () {\r\n                                element[0].focus();\r\n                            });\r\n                            scope.$parent[attrs.focusFrom] = false;\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n        }]);\r\n\r\n})(window.angular);\r\n","(function (ng) {\r\n    'use strict';\r\n\r\n    // based on https://stackoverflow.com/a/40164638/20980\r\n\r\n    ng\r\n        .module('akit.component.chatbotWidget')\r\n        .directive('scrollToBottom', function ($timeout, $window) {\r\n            return {\r\n                scope: {\r\n                    scrollToBottom: \"=\"\r\n                },\r\n                restrict: 'A',\r\n                link: function (scope, element, attr) {\r\n                    scope.$watchCollection('scrollToBottom', function (newVal) {\r\n                        if (newVal) {\r\n                            $timeout(function () {\r\n                                element[0].scrollTop =  element[0].scrollHeight;\r\n                            }, 0);\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n        });\r\n\r\n})(window.angular);\r\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget')\n        .service('akit.component.chatbotWidget.chatbotService', [\n            '$http',\n            '$interval',\n            '$q',\n            function ($http) {\n\n                var API = {};\n\n                function sendMessage(url, message) {\n                    return $http.post(url, Object.assign({}, message)).then(\n                        function (response) {\n                            var result = response.data;\n                            // merge quick reply buttons with messages\n                            if (result.quickReplies) {\n                                result.data.push({\n                                    type: 'radio',\n                                    message: '',\n                                    elements: result.quickReplies.map(function (item) {\n                                        return {\n                                            text: item.text,\n                                            replyText: item.action\n                                        };\n                                    })\n                                });\n                            }\n                            return result;\n                        }\n                    );\n                }\n\n                API.sendMessage = sendMessage;\n\n                return API;\n\n            }\n        ]);\n\n// @ts-ignore\n})(window.angular);\n"],"sourceRoot":"dist/js"}