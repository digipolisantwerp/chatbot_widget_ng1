{"version":3,"sources":["module.js","main.js","controllers/chatbot-message.js","controllers/chatbot-widget.js","directives/chatbot-message.js","directives/chatbot-widget.js","directives/focus-from.js","directives/scroll-to-bottom.js","services/chatbot.js"],"names":["ng","window","angular","module","controller","$scope","this","data","hide","sendReply","message","$emit","$timeout","chatbotService","pinned","pinnedtext","placeholder","delay","title","session","initialmessage","focusTextInput","vm","session_id","type","send","isLoading","isOpen","sendMessage","messageText","hidden","addToChat","url","then","result","Error","forEach","item","index","catch","error","pushError","toggleChatbot","event","onInputKey","which","$on","newData","concat","Object","assign","errorMessage","status","statusText","directive","$window","restrict","replace","templateUrl","controllerAs","scope","height","link","element","attrs","ctrl","$parse","$watch","focusFrom","value","focus","$parent","scrollToBottom","attr","$watchCollection","newVal","scrollTop","scrollHeight","service","$http","API","post","response","quickReplies","push","elements","map","text","replyText","action","run","$templateCache","put"],"mappings":"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","file":"akit.component.chatbot-widget.min.js","sourcesContent":["(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget', []);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget', []);\n\n})(window.angular);\n","(function (ng) {\n    \"use strict\";\n\n    ng.module(\"akit.component.chatbotWidget\").controller(\n        \"akit.component.chatbotWidget.chatbotMessageController\",\n        [\n            \"$scope\",\n            \"$timeout\",\n            function ($scope) {\n                this.data = $scope.data || { hide: true };\n\n                this.sendReply = function (message) {\n                    $scope.$emit('chatbotMessageReplyClicked', { message: message });\n                    $scope.data.hide = true;\n                };\n            }\n        ]\n    );\n})(window.angular);\n","(function (ng) {\n    \"use strict\";\n\n    ng.module(\"akit.component.chatbotWidget\").controller(\n        \"akit.component.chatbotWidget.chatbotWidgetController\",\n        [\n            \"$scope\",\n            \"$timeout\",\n            \"akit.component.chatbotWidget.chatbotService\",\n            function ($scope, $timeout, chatbotService) {\n                // ensure we have default values\n                this.pinned = ($scope.pinned === \"false\") ? false : !!$scope.pinned;\n                this.pinnedtext = $scope.pinnedtext || \"Een vraag stellen\";\n                this.placeholder = $scope.placeholder || \"\";\n                this.delay = $scope.delay || 400;\n                this.title = $scope.title || \"\";\n                this.session = $scope.session;\n                this.initialmessage = $scope.initialmessage || \"STARTCOMMANDO\";\n                // $scope.height is used directly (two-way binding)\n\n                // set to true to focus the text entry field\n                $scope.focusTextInput = false;\n\n                var vm = this;\n                vm.data = [];\n                vm.message = {\n                    session_id: this.session,\n                    message: \"\",\n                    type: \"text\",\n                    send: true\n                };\n                vm.isLoading = false;\n                vm.isOpen = false;\n\n                vm.sendMessage = function (messageText, hidden) {\n                    if (messageText) vm.message.message = messageText;\n                    // user did not type a message && we aren't sending this programmatically\n                    if (!vm.message.message && !hidden) {\n                        return;\n                    }\n\n                    // Start loader\n                    vm.isLoading = true;\n\n                    // Add to data\n                    if (!hidden) vm.addToChat(vm.message);\n\n                    // Send new data\n                    chatbotService\n                        .sendMessage($scope.url, vm.message)\n                        .then(\n                            function (result) {\n                                if (result.data) {\n                                    result.data.forEach(function (item, index) {\n                                        $timeout(function () {\n                                            vm.addToChat(item);\n                                        }, index * vm.delay);\n                                    });\n                                    vm.isLoading = false;\n                                } else {\n                                    throw new Error(\"no data returned from service\");\n                                }\n                            }\n                        ).catch(\n                            function (error) {\n                                vm.pushError(error);\n                                vm.isLoading = false;\n                            }\n                        );\n\n                    // Clean\n                    this.message.message = \"\";\n\n                    // Focus\n                    $scope.focusTextInput = true;\n                };\n\n                vm.toggleChatbot = function () {\n                    this.isOpen = !this.isOpen;\n                    if (this.isOpen) {\n                        $timeout(function () {\n                            $scope.focusTextInput = true;\n                        });\n                    }\n                };\n\n                vm.sendReply = function (event, data) {\n                    vm.sendMessage(data.message);\n                };\n\n                vm.onInputKey = function (event) {\n                    if (event.which === 13) {\n                        vm.sendMessage();\n                    }\n                };\n\n                // listen to click events of child <aui-chatbot-message> directives\n                $scope.$on('chatbotMessageReplyClicked', vm.sendReply);\n\n                vm.addToChat = function (message) {\n                    if (message.type === \"text\" && message.message === \"\") {\n                        // ignore blank messages\n                        // welcome message must not be shown if it is the empty string\n                    } else {\n                        var newData = [].concat(vm.data, [\n                            Object.assign({}, message)\n                        ]);\n                        this.data = newData;\n                    }\n                };\n\n                vm.pushError = function (error) {\n                    var errorMessage = {\n                        message:\n                            \"Error \" +\n                            error.status +\n                            \" - \" +\n                            error.statusText +\n                            \": \" +\n                            error.error.title,\n                        type: \"error\"\n                    };\n                    this.addToChat(errorMessage);\n                };\n\n                // request opening message from chatbot\n                vm.sendMessage(this.initialmessage, true);\n            }\n        ]\n    );\n// @ts-ignore\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget')\n        .directive('auiChatbotMessage', [\n            '$timeout',\n            '$window',\n            function (\n                $timeout,\n                $window\n            ) {\n\n                return {\n                    restrict: 'E',\n                    replace: true,\n                    templateUrl: '/assets/chatbot-widget/views/directives/chatbot-message.htm',\n                    controller: 'akit.component.chatbotWidget.chatbotMessageController',\n                    controllerAs: 'msg',\n                    scope: {\n                        data: '='\n                    }\n                };\n\n            }\n        ]);\n\n})(window.angular);\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget')\n        .directive('auiChatbotWidget', [\n            function () {\n\n                return {\n                    restrict: 'AE',\n                    replace: true,\n                    templateUrl: '/assets/chatbot-widget/views/directives/chatbot-widget.htm',\n                    controller: 'akit.component.chatbotWidget.chatbotWidgetController',\n                    controllerAs: 'chatbot',\n                    scope: {\n                        url: '@',\n                        session: '@',\n                        title: '@',\n                        pinned: '@?',\n                        pinnedtext: '@?',\n                        placeholder: '@?',\n                        delay: '@?',\n                        height: '=?',\n                        initialmessage: '@?'\n                    },\n                    link: function (scope, element, attrs, ctrl) {\n\n                    }\n                };\n\n            }\n        ]);\n\n// @ts-ignore\n})(window.angular);\n","(function (ng) {\r\n    'use strict';\r\n\r\n    // based on https://stackoverflow.com/a/14837021/20980\r\n    // <input focusFrom=\"focusMyInput\"> will be focused\r\n    // when this.focusMyInput is set to true in the controller\r\n    // and will then set this.focusMyInput to false\r\n\r\n    ng\r\n        .module('akit.component.chatbotWidget')\r\n        .directive('focusFrom', ['$timeout', '$parse', function ($timeout, $parse) {\r\n            return {\r\n                restrict: 'A',\r\n                link: function (scope, element, attrs) {\r\n                    scope.$watch(attrs.focusFrom, function (value) {\r\n                        if (value) {\r\n                            $timeout(function () {\r\n                                element[0].focus();\r\n                            });\r\n                            scope.$parent[attrs.focusFrom] = false;\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n        }]);\r\n\r\n})(window.angular);\r\n","(function (ng) {\r\n    'use strict';\r\n\r\n    // based on https://stackoverflow.com/a/40164638/20980\r\n\r\n    ng\r\n        .module('akit.component.chatbotWidget')\r\n        .directive('scrollToBottom', function ($timeout, $window) {\r\n            return {\r\n                scope: {\r\n                    scrollToBottom: \"=\"\r\n                },\r\n                restrict: 'A',\r\n                link: function (scope, element, attr) {\r\n                    scope.$watchCollection('scrollToBottom', function (newVal) {\r\n                        if (newVal) {\r\n                            $timeout(function () {\r\n                                element[0].scrollTop =  element[0].scrollHeight;\r\n                            }, 0);\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n        });\r\n\r\n})(window.angular);\r\n","(function (ng) {\n    'use strict';\n\n    ng\n        .module('akit.component.chatbotWidget')\n        .service('akit.component.chatbotWidget.chatbotService', [\n            '$http',\n            '$interval',\n            '$q',\n            function ($http) {\n\n                var API = {};\n\n                function sendMessage(url, message) {\n                    return $http.post(url, Object.assign({}, message)).then(\n                        function (response) {\n                            var result = response.data;\n                            // merge quick reply buttons with messages\n                            if (result.quickReplies) {\n                                result.data.push({\n                                    type: 'radio',\n                                    message: '',\n                                    elements: result.quickReplies.map(function (item) {\n                                        return {\n                                            text: item.text,\n                                            replyText: item.action\n                                        };\n                                    })\n                                });\n                            }\n                            return result;\n                        }\n                    );\n                }\n\n                API.sendMessage = sendMessage;\n\n                return API;\n\n            }\n        ]);\n\n// @ts-ignore\n})(window.angular);\n"],"sourceRoot":"dist/js"}